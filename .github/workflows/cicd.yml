name: SQLAlchemy Dialect integration tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Give us a button to allow running the workflow on demand for testing.
  workflow_dispatch:
    inputs:
      tags:
        description: "Manual Workflow Run"
        required: false
        type: string

jobs:
  dialect-test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1 # limit to 1 since we have 1 dsql cluster
      matrix:
        # Run test for every python version we intend to support.
        version: ['3.10', '3.11', '3.12', '3.13']
    permissions:
      id-token: write
      contents: read
      # Explicitly set permissions, following the principle of least privilege
      actions: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.version }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PYTHON_IAM_ROLE }}
          aws-region: us-east-1

      - name: Configure Python
        run: |
          python3 -m venv sqlalchemy-integ
          source sqlalchemy-integ/bin/activate
          pip install --upgrade pip
          pip install .
          pip install '.[test,psycopg2,psycopg]'
          python3 -c "import boto3; print(boto3.__version__)"
          pip list

      - name: Lint and Check for Formatting
        run: |
          source sqlalchemy-integ/bin/activate 
          ruff check

      - name: Run integration tests for SQL Alchemy via psycopg2
        env:
          CLUSTER_ENDPOINT: ${{ secrets.PYTHON_SQLALCHEMY_DIALECT_CLUSTER_ENDPOINT }}
          REGION: ${{ secrets.PYTHON_SQLALCHEMY_DIALECT_CLUSTER_REGION }}
          CLUSTER_USER: admin
          DRIVER: psycopg2
        run: |
          source sqlalchemy-integ/bin/activate 
          wget https://www.amazontrust.com/repository/AmazonRootCA1.pem -O root.pem
          echo "$GITHUB_WORKSPACE" >> $GITHUB_PATH
          pytest -v test/

      - name: Run integration tests for SQL Alchemy via psycopg (psycopg3)
        env:
          CLUSTER_ENDPOINT: ${{ secrets.PYTHON_SQLALCHEMY_DIALECT_CLUSTER_ENDPOINT }}
          REGION: ${{ secrets.PYTHON_SQLALCHEMY_DIALECT_CLUSTER_REGION }}
          CLUSTER_USER: admin
          DRIVER: psycopg
        run: |
          source sqlalchemy-integ/bin/activate 
          echo "$GITHUB_WORKSPACE" >> $GITHUB_PATH
          pytest -v test/

      - name: Run integration tests for SQL Alchemy Pet Clinic Example
        env:
          source sqlalchemy-integ/bin/activate 
          CLUSTER_ENDPOINT: ${{ secrets.PYTHON_SQLALCHEMY_DIALECT_CLUSTER_ENDPOINT }}
          REGION: ${{ secrets.PYTHON_SQLALCHEMY_DIALECT_CLUSTER_REGION }}
          CLUSTER_USER: admin
        run: |
          echo "$GITHUB_WORKSPACE" >> $GITHUB_PATH
          pytest -v examples/pet-clinic-app/test/
